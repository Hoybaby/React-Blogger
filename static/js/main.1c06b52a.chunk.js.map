{"version":3,"sources":["Navbar.js","BlogList.jsx","useFetch.js","Home.js","Create.jsx","BlogDetails.js","App.js","index.js"],"names":["Navbar","className","to","style","color","backgroundColor","borderRadius","BlogList","blogs","title","map","blog","id","author","useFetch","url","useState","data","setData","isLoading","setisLoading","error","setError","useEffect","abortCont","AbortController","fetch","signal","then","res","console","log","ok","Error","json","catch","err","message","abort","Home","Create","setTitle","body","setBody","setAuthor","isPending","setIsPending","history","useHistory","onSubmit","e","preventDefault","method","headers","JSON","stringify","push","type","required","value","onChange","target","disabled","BlogDetails","useParams","onClick","App","exact","path","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1c06b52a.chunk.js","sourcesContent":["import { Link } from 'react-router-dom';\r\n\r\n\r\nconst Navbar = () => {\r\n    return ( \r\n        <nav className=\"navbar\">\r\n            <h1>the Dojo Blog</h1>\r\n            <div className=\"links\">\r\n                <Link to=\"/\">Home</Link>\r\n                <Link to=\"/create\" style={{\r\n                    color: \"white\",\r\n                    backgroundColor: \"#f1356d\",\r\n                    borderRadius: \"8px\"\r\n                }}>New Blog</Link>\r\n            </div>\r\n        </nav>\r\n    );\r\n}\r\n\r\nexport default Navbar;","import React from 'react'\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst BlogList = ({blogs, title}) => {\r\n\r\n    // const blogs = props.blogs;\r\n    // const title = props.title\r\n\r\n    // console.log(props,blogs);\r\n    \r\n\r\n    return (\r\n        <div className=\"blog-list\">\r\n            <h2>{ title} </h2>\r\n            {blogs.map((blog) => (\r\n                <div className=\"blog-preview\" key={blog.id}>\r\n                    <Link to={`/blogs/${blog.id}`}>\r\n                        <h2>{blog.title}</h2>\r\n                        <p>written by {blog.author}</p>\r\n                    </Link>\r\n                    \r\n                </div>\r\n            ))}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default BlogList;\r\n","import React, { useState, useEffect } from 'react'\r\n\r\nconst useFetch = (url) => {\r\n\r\n    //changed blogs to data so it can be reusable later\r\n    const [data, setData] = useState (null);\r\n    const [isLoading, setisLoading] = useState(true);\r\n    const [error, setError] = useState(null)\r\n\r\n\r\n\r\n    useEffect(() => {\r\n\r\n        const abortCont = new AbortController();\r\n\r\n        fetch(url, {signal:abortCont.signal}) //this will return a promise so i can then do\r\n            .then(res => {\r\n                console.log(res);\r\n                if(!res.ok) {\r\n                    throw Error('could not fetch the data. bad endpoint')\r\n                }\r\n                return res.json() //this passes a json into an JS object for us\r\n            })\r\n            .then((data)=> { //data could be named anything. nothing to do with the blog file\r\n                console.log(data);\r\n                setData(data);\r\n                setisLoading(false);\r\n                setError(null);\r\n            })\r\n            .catch(err => {\r\n                // console.log(err.message);\r\n                setError(err.message);\r\n                setisLoading(false);\r\n            })\r\n\r\n            return() => abortCont.abort();\r\n    }, [url]);\r\n\r\n    //this returns 3 values, the data we are trying to fetch, the value if true or false and an error if there is one.\r\n    return { data, isLoading, error}\r\n}\r\n\r\nexport default useFetch;\r\n","import React, { useState, useEffect } from 'react'\r\nimport BlogList from './BlogList.jsx';\r\nimport useFetch from './useFetch.js';\r\n\r\nfunction Home() {\r\n\r\n    // const handleDelete = (id) => {\r\n        \r\n    //     //this doesnt change the orginal data, only returns new filtered array.\r\n    //     //if true, it remains in the array, if false it is removed\r\n    //     const newBlogs = blogs.filter((blog => blog.id !== id));\r\n    //     setBlogs(newBlogs);\r\n    // }\r\n\r\n    const { data: blogs, isLoading, error} = useFetch('http://localhost:8000/blogs')\r\n\r\n    return (\r\n        <div className=\"home\">\r\n            {error && <div>{error}</div>}\r\n            {isLoading && <div>Loading...</div>}\r\n            \r\n            {/* you can name blogs anything but then inside the curly is the actual PROP which has to be consistent with a variable name */}\r\n            {blogs && <BlogList blogs={blogs} title=\"All Blogs\"/>} \r\n            {/* <button onClick={() => setName('luigi')}>change name</button> */}\r\n            {/* <p>{name}</p> */}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Home;\r\n","import React from 'react';\r\nimport {useState} from 'react';\r\nimport {useHistory} from 'react-router-dom'\r\n\r\nconst Create = () => {\r\n\r\n    const [title, setTitle] = useState('');\r\n    const [body, setBody] =useState('');\r\n    const [author, setAuthor] = useState('mario');\r\n    const [ isPending, setIsPending] = useState(false)\r\n\r\n    //this is an object\r\n    const history = useHistory();\r\n\r\n    const handleSubmit =(e) => {\r\n        e.preventDefault();\r\n\r\n        const blog = {title, body, author};\r\n\r\n        setIsPending(true);\r\n\r\n        //second arguement is where we tack on the data but also define the type of request we sending.\r\n        fetch('http://localhost:8000/blogs', {\r\n        method: 'POST',\r\n        headers: {\"Content-Type\" : \"application/json\"},\r\n        body: JSON.stringify(blog)\r\n        }).then(() => {\r\n            console.log('new blog added');\r\n            setIsPending(false);\r\n            history.push('/')\r\n        })\r\n\r\n    \r\n    }\r\n\r\n    return (\r\n        <div className=\"create\">\r\n            <h2>Add a New blog!</h2>\r\n            <form onSubmit={handleSubmit}>\r\n                <label>Blog Title: </label>\r\n                <input \r\n                type=\"text\"\r\n                required\r\n                value={title}\r\n                onChange={ (e) => setTitle(e.target.value)}\r\n                />\r\n                <label>Blog Body: </label>\r\n                <textarea \r\n                required\r\n                onChange={ (e) => setBody(e.target.value)}\r\n                ></textarea>\r\n                <label>Blog Aurthor: </label>\r\n                    <select\r\n                    value={author}\r\n                    onChange={(e) => setAuthor(e.target.value)}\r\n                    >\r\n                        <option value=\"mario\">mario</option>\r\n                        <option value=\"yoshi\">yoshi</option>\r\n                    </select>\r\n                    {!isPending && <button>Add Blog</button>} \r\n                    {isPending && <button disabled>Adding Blog...</button>}\r\n                    <p>{title}</p>\r\n                    <p>{body}</p>\r\n                    <p>{author} </p>\r\n            </form>\r\n        </div>\r\n        );\r\n}\r\n \r\nexport default Create;","import { useHistory, useParams} from 'react-router-dom'\r\nimport useFetch from './useFetch';\r\n\r\nconst BlogDetails =() => {\r\n\r\n    // we name it ID because we nammed it that in app.js\r\n    const{ id }= useParams();\r\n    const { data:blog, error, isLoading } = useFetch('http://localhost:8000/blogs/' + id);\r\n    const history = useHistory();\r\n\r\n    //all fetches are async so a .then is good to have\r\n    const handleClick = () => {\r\n        fetch('http://localhost:8000/blogs/' + blog.id, {\r\n            method: 'DELETE'\r\n        }).then(() => {\r\n            history.push('/');\r\n        })\r\n    }\r\n\r\n    return (\r\n        \r\n        <div className=\"blog-details\">\r\n            <h2>Blog Details - {id} </h2>\r\n            {isLoading && <div>Loading...</div>}\r\n            {error && <div> {error} </div>}\r\n            {blog && (\r\n                <article>\r\n                    {/* this data is from our data segment in db.json */}\r\n                    <h2>{blog.title}</h2>\r\n                    <p>Written by {blog.author}</p>\r\n                    <div>{blog.body}</div>\r\n                    <button onClick={handleClick}>Delete Blog</button>\r\n                </article>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default BlogDetails;","// import logo from './logo.svg';\nimport Navbar from \"./Navbar\";\nimport Home from \"./Home\";\nimport {BrowserRouter as Router, Route, Switch} from 'react-router-dom';\nimport Create from \"./Create\";\nimport BlogDetails from \"./BlogDetails\";\n\nfunction App() {\n  // const title = \"welcome to the new blog\";\n  // const likes =50;\n\n  return (\n    <Router>\n      <div className=\"App\">\n        <Navbar/>\n        <div className=\"content\">\n          <Switch>\n            <Route exact path=\"/\">\n              <Home/>\n            </Route>\n            <Route exact path=\"/create\">\n              <Create/>\n            </Route>\n            <Route exact path=\"/blogs/:id\">\n              <BlogDetails/>\n            </Route>\n          </Switch>\n        </div>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n"],"sourceRoot":""}