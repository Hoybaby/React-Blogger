{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\n\nconst useFetch = url => {\n  _s();\n\n  //changed blogs to data so it can be reusable later\n  const [data, setData] = useState(null);\n  const [isLoading, setisLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const abortCont = new AbortController();\n    fetch(url, {\n      signal: abortCont.signal\n    }) //this will return a promise so i can then do\n    .then(res => {\n      console.log(res);\n\n      if (!res.ok) {\n        throw Error('could not fetch the data. bad endpoint');\n      }\n\n      return res.json(); //this passes a json into an JS object for us\n    }).then(data => {\n      //data could be named anything. nothing to do with the blog file\n      console.log(data);\n      setData(data);\n      setisLoading(false);\n      setError(null);\n    }).catch(err => {\n      // console.log(err.message);\n      setError(err.message);\n      setisLoading(false);\n    });\n    return () => abortCont.abort();\n  }, [url]); //this returns 3 values, the data we are trying to fetch, the value if true or false and an error if there is one.\n\n  return {\n    data,\n    isLoading,\n    error\n  };\n};\n\n_s(useFetch, \"SPHw+YieL9Yhz3NVkHMzVVBAE+w=\");\n\nexport default useFetch;","map":{"version":3,"sources":["D:/Coding Examples in VS/react-practice2/client/src/useFetch.js"],"names":["React","useState","useEffect","useFetch","url","data","setData","isLoading","setisLoading","error","setError","abortCont","AbortController","fetch","signal","then","res","console","log","ok","Error","json","catch","err","message","abort"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;;AAEA,MAAMC,QAAQ,GAAIC,GAAD,IAAS;AAAA;;AAEtB;AACA,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBL,QAAQ,CAAE,IAAF,CAAhC;AACA,QAAM,CAACM,SAAD,EAAYC,YAAZ,IAA4BP,QAAQ,CAAC,IAAD,CAA1C;AACA,QAAM,CAACQ,KAAD,EAAQC,QAAR,IAAoBT,QAAQ,CAAC,IAAD,CAAlC;AAIAC,EAAAA,SAAS,CAAC,MAAM;AAEZ,UAAMS,SAAS,GAAG,IAAIC,eAAJ,EAAlB;AAEAC,IAAAA,KAAK,CAACT,GAAD,EAAM;AAACU,MAAAA,MAAM,EAACH,SAAS,CAACG;AAAlB,KAAN,CAAL,CAAsC;AAAtC,KACKC,IADL,CACUC,GAAG,IAAI;AACTC,MAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;;AACA,UAAG,CAACA,GAAG,CAACG,EAAR,EAAY;AACR,cAAMC,KAAK,CAAC,wCAAD,CAAX;AACH;;AACD,aAAOJ,GAAG,CAACK,IAAJ,EAAP,CALS,CAKS;AACrB,KAPL,EAQKN,IARL,CAQWV,IAAD,IAAS;AAAE;AACbY,MAAAA,OAAO,CAACC,GAAR,CAAYb,IAAZ;AACAC,MAAAA,OAAO,CAACD,IAAD,CAAP;AACAG,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACAE,MAAAA,QAAQ,CAAC,IAAD,CAAR;AACH,KAbL,EAcKY,KAdL,CAcWC,GAAG,IAAI;AACV;AACAb,MAAAA,QAAQ,CAACa,GAAG,CAACC,OAAL,CAAR;AACAhB,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACH,KAlBL;AAoBI,WAAM,MAAMG,SAAS,CAACc,KAAV,EAAZ;AACP,GAzBQ,EAyBN,CAACrB,GAAD,CAzBM,CAAT,CATsB,CAoCtB;;AACA,SAAO;AAAEC,IAAAA,IAAF;AAAQE,IAAAA,SAAR;AAAmBE,IAAAA;AAAnB,GAAP;AACH,CAtCD;;GAAMN,Q;;AAwCN,eAAeA,QAAf","sourcesContent":["import React, { useState, useEffect } from 'react'\r\n\r\nconst useFetch = (url) => {\r\n\r\n    //changed blogs to data so it can be reusable later\r\n    const [data, setData] = useState (null);\r\n    const [isLoading, setisLoading] = useState(true);\r\n    const [error, setError] = useState(null)\r\n\r\n\r\n\r\n    useEffect(() => {\r\n\r\n        const abortCont = new AbortController();\r\n\r\n        fetch(url, {signal:abortCont.signal}) //this will return a promise so i can then do\r\n            .then(res => {\r\n                console.log(res);\r\n                if(!res.ok) {\r\n                    throw Error('could not fetch the data. bad endpoint')\r\n                }\r\n                return res.json() //this passes a json into an JS object for us\r\n            })\r\n            .then((data)=> { //data could be named anything. nothing to do with the blog file\r\n                console.log(data);\r\n                setData(data);\r\n                setisLoading(false);\r\n                setError(null);\r\n            })\r\n            .catch(err => {\r\n                // console.log(err.message);\r\n                setError(err.message);\r\n                setisLoading(false);\r\n            })\r\n\r\n            return() => abortCont.abort();\r\n    }, [url]);\r\n\r\n    //this returns 3 values, the data we are trying to fetch, the value if true or false and an error if there is one.\r\n    return { data, isLoading, error}\r\n}\r\n\r\nexport default useFetch;\r\n"]},"metadata":{},"sourceType":"module"}